// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"
)

// IPartnerRepository is an autogenerated mock type for the IPartnerRepository type
type IPartnerRepository struct {
	mock.Mock
}

// ArePartner provides a mock function with given fields: cnh, cnpj
func (_m *IPartnerRepository) ArePartner(cnh string, cnpj string) (bool, error) {
	ret := _m.Called(cnh, cnpj)

	if len(ret) == 0 {
		panic("no return value specified for ArePartner")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(cnh, cnpj)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(cnh, cnpj)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(cnh, cnpj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *IPartnerRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllByCnh provides a mock function with given fields: cnh
func (_m *IPartnerRepository) FindAllByCnh(cnh string) ([]entity.Partner, error) {
	ret := _m.Called(cnh)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByCnh")
	}

	var r0 []entity.Partner
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.Partner, error)); ok {
		return rf(cnh)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.Partner); ok {
		r0 = rf(cnh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Partner)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cnh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByCnpj provides a mock function with given fields: cnpj
func (_m *IPartnerRepository) FindAllByCnpj(cnpj string) ([]entity.Partner, error) {
	ret := _m.Called(cnpj)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByCnpj")
	}

	var r0 []entity.Partner
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.Partner, error)); ok {
		return rf(cnpj)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.Partner); ok {
		r0 = rf(cnpj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Partner)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cnpj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *IPartnerRepository) Get(id string) (*entity.Partner, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.Partner
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Partner, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Partner); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Partner)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIPartnerRepository creates a new instance of IPartnerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPartnerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPartnerRepository {
	mock := &IPartnerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
