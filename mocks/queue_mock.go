// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	value "github.com/venture-technology/venture/internal/value"
)

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

// DeleteMessage provides a mock function with given fields: queue, identifier
func (_m *Queue) DeleteMessage(queue string, identifier string) error {
	ret := _m.Called(queue, identifier)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(queue, identifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PullMessages provides a mock function with given fields: queue
func (_m *Queue) PullMessages(queue string) ([]*value.CreateMessage, error) {
	ret := _m.Called(queue)

	if len(ret) == 0 {
		panic("no return value specified for PullMessages")
	}

	var r0 []*value.CreateMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*value.CreateMessage, error)); ok {
		return rf(queue)
	}
	if rf, ok := ret.Get(0).(func(string) []*value.CreateMessage); ok {
		r0 = rf(queue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*value.CreateMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(queue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: queue, message
func (_m *Queue) SendMessage(queue string, message string) error {
	ret := _m.Called(queue, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(queue, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
