// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"
)

// IAwsRepository is an autogenerated mock type for the IAwsRepository type
type IAwsRepository struct {
	mock.Mock
}

// ListImagesAtS3 provides a mock function with given fields: ctx, path
func (_m *IAwsRepository) ListImagesAtS3(ctx context.Context, path string) ([]string, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for ListImagesAtS3")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAtS3 provides a mock function with given fields: ctx, path, filename, file
func (_m *IAwsRepository) SaveAtS3(ctx context.Context, path string, filename string, file []byte) (string, error) {
	ret := _m.Called(ctx, path, filename, file)

	if len(ret) == 0 {
		panic("no return value specified for SaveAtS3")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) (string, error)); ok {
		return rf(ctx, path, filename, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) string); ok {
		r0 = rf(ctx, path, filename, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte) error); ok {
		r1 = rf(ctx, path, filename, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: ctx, email
func (_m *IAwsRepository) SendEmail(ctx context.Context, email *entity.Email) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Email) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAwsRepository creates a new instance of IAwsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAwsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAwsRepository {
	mock := &IAwsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
