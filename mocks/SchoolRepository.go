// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"
)

// SchoolRepository is an autogenerated mock type for the SchoolRepository type
type SchoolRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: school
func (_m *SchoolRepository) Create(school *entity.School) error {
	ret := _m.Called(school)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.School) error); ok {
		r0 = rf(school)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: cnpj
func (_m *SchoolRepository) Delete(cnpj string) error {
	ret := _m.Called(cnpj)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(cnpj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *SchoolRepository) FindAll() ([]entity.School, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.School
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.School, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.School); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.School)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: email
func (_m *SchoolRepository) FindByEmail(email string) (*entity.School, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *entity.School
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.School, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.School); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.School)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: cnpj
func (_m *SchoolRepository) Get(cnpj string) (*entity.School, error) {
	ret := _m.Called(cnpj)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.School
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.School, error)); ok {
		return rf(cnpj)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.School); ok {
		r0 = rf(cnpj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.School)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cnpj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: cnpj, attributes
func (_m *SchoolRepository) Update(cnpj string, attributes map[string]interface{}) error {
	ret := _m.Called(cnpj, attributes)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(cnpj, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSchoolRepository creates a new instance of SchoolRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchoolRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SchoolRepository {
	mock := &SchoolRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
