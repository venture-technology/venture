// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	signatures "github.com/venture-technology/venture/internal/domain/service/signatures"
	value "github.com/venture-technology/venture/internal/value"
)

// Signature is an autogenerated mock type for the Signature type
type Signature struct {
	mock.Mock
}

// Create provides a mock function with given fields: params
func (_m *Signature) Create(params value.CreateContractParams) (*signatures.ContractParams, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *signatures.ContractParams
	var r1 error
	if rf, ok := ret.Get(0).(func(value.CreateContractParams) (*signatures.ContractParams, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(value.CreateContractParams) *signatures.ContractParams); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*signatures.ContractParams)
		}
	}

	if rf, ok := ret.Get(1).(func(value.CreateContractParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSignature creates a new instance of Signature. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignature(t interface {
	mock.TestingT
	Cleanup(func())
}) *Signature {
	mock := &Signature{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
