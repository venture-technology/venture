// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"

	stripe "github.com/stripe/stripe-go/v79"
)

// PaymentsService is an autogenerated mock type for the PaymentsService type
type PaymentsService struct {
	mock.Mock
}

// AttachCardToResponsible provides a mock function with given fields: customerID, paymentMethodID
func (_m *PaymentsService) AttachCardToResponsible(customerID string, paymentMethodID string) (*stripe.PaymentMethod, error) {
	ret := _m.Called(customerID, paymentMethodID)

	if len(ret) == 0 {
		panic("no return value specified for AttachCardToResponsible")
	}

	var r0 *stripe.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*stripe.PaymentMethod, error)); ok {
		return rf(customerID, paymentMethodID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *stripe.PaymentMethod); ok {
		r0 = rf(customerID, paymentMethodID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(customerID, paymentMethodID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateRemainingValueSubscription provides a mock function with given fields: invoices, amount
func (_m *PaymentsService) CalculateRemainingValueSubscription(invoices map[string]entity.InvoiceInfo, amount float64) float64 {
	ret := _m.Called(invoices, amount)

	if len(ret) == 0 {
		panic("no return value specified for CalculateRemainingValueSubscription")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(map[string]entity.InvoiceInfo, float64) float64); ok {
		r0 = rf(invoices, amount)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// CreateCustomer provides a mock function with given fields: responsible
func (_m *PaymentsService) CreateCustomer(responsible *entity.Responsible) (string, error) {
	ret := _m.Called(responsible)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Responsible) (string, error)); ok {
		return rf(responsible)
	}
	if rf, ok := ret.Get(0).(func(*entity.Responsible) string); ok {
		r0 = rf(responsible)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entity.Responsible) error); ok {
		r1 = rf(responsible)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePaymentMethod provides a mock function with given fields: token
func (_m *PaymentsService) CreatePaymentMethod(token string) (*stripe.PaymentMethod, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentMethod")
	}

	var r0 *stripe.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*stripe.PaymentMethod, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *stripe.PaymentMethod); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrice provides a mock function with given fields: stripeProductID, amount
func (_m *PaymentsService) CreatePrice(stripeProductID string, amount float64) (*stripe.Price, error) {
	ret := _m.Called(stripeProductID, amount)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrice")
	}

	var r0 *stripe.Price
	var r1 error
	if rf, ok := ret.Get(0).(func(string, float64) (*stripe.Price, error)); ok {
		return rf(stripeProductID, amount)
	}
	if rf, ok := ret.Get(0).(func(string, float64) *stripe.Price); ok {
		r0 = rf(stripeProductID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Price)
		}
	}

	if rf, ok := ret.Get(1).(func(string, float64) error); ok {
		r1 = rf(stripeProductID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: contract
func (_m *PaymentsService) CreateProduct(contract *entity.Contract) (*stripe.Product, error) {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *stripe.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Contract) (*stripe.Product, error)); ok {
		return rf(contract)
	}
	if rf, ok := ret.Get(0).(func(*entity.Contract) *stripe.Product); ok {
		r0 = rf(contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Contract) error); ok {
		r1 = rf(contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: customerID, stripePriceID
func (_m *PaymentsService) CreateSubscription(customerID string, stripePriceID string) (*stripe.Subscription, error) {
	ret := _m.Called(customerID, stripePriceID)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 *stripe.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*stripe.Subscription, error)); ok {
		return rf(customerID, stripePriceID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *stripe.Subscription); ok {
		r0 = rf(customerID, stripePriceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(customerID, stripePriceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStripeUser provides a mock function with given fields: customerId
func (_m *PaymentsService) DeleteStripeUser(customerId string) (*stripe.Customer, error) {
	ret := _m.Called(customerId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStripeUser")
	}

	var r0 *stripe.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*stripe.Customer, error)); ok {
		return rf(customerId)
	}
	if rf, ok := ret.Get(0).(func(string) *stripe.Customer); ok {
		r0 = rf(customerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: contract
func (_m *PaymentsService) DeleteSubscription(contract *entity.Contract) (*stripe.Subscription, error) {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 *stripe.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Contract) (*stripe.Subscription, error)); ok {
		return rf(contract)
	}
	if rf, ok := ret.Get(0).(func(*entity.Contract) *stripe.Subscription); ok {
		r0 = rf(contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Contract) error); ok {
		r1 = rf(contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FineResponsible provides a mock function with given fields: customerId, paymentMethodId, amountFine
func (_m *PaymentsService) FineResponsible(customerId string, paymentMethodId string, amountFine int64) (*stripe.PaymentIntent, error) {
	ret := _m.Called(customerId, paymentMethodId, amountFine)

	if len(ret) == 0 {
		panic("no return value specified for FineResponsible")
	}

	var r0 *stripe.PaymentIntent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (*stripe.PaymentIntent, error)); ok {
		return rf(customerId, paymentMethodId, amountFine)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) *stripe.PaymentIntent); ok {
		r0 = rf(customerId, paymentMethodId, amountFine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.PaymentIntent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(customerId, paymentMethodId, amountFine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoice provides a mock function with given fields: invoiceId
func (_m *PaymentsService) GetInvoice(invoiceId string) (*stripe.Invoice, error) {
	ret := _m.Called(invoiceId)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoice")
	}

	var r0 *stripe.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*stripe.Invoice, error)); ok {
		return rf(invoiceId)
	}
	if rf, ok := ret.Get(0).(func(string) *stripe.Invoice); ok {
		r0 = rf(invoiceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(invoiceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: subscriptionId
func (_m *PaymentsService) GetSubscription(subscriptionId string) (*stripe.Subscription, error) {
	ret := _m.Called(subscriptionId)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *stripe.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*stripe.Subscription, error)); ok {
		return rf(subscriptionId)
	}
	if rf, ok := ret.Get(0).(func(string) *stripe.Subscription); ok {
		r0 = rf(subscriptionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subscriptionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvoices provides a mock function with given fields: contractId
func (_m *PaymentsService) ListInvoices(contractId string) (map[string]entity.InvoiceInfo, error) {
	ret := _m.Called(contractId)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoices")
	}

	var r0 map[string]entity.InvoiceInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]entity.InvoiceInfo, error)); ok {
		return rf(contractId)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]entity.InvoiceInfo); ok {
		r0 = rf(contractId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entity.InvoiceInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(contractId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: responsible
func (_m *PaymentsService) ListSubscriptions(responsible *entity.Responsible) ([]entity.SubscriptionInfo, error) {
	ret := _m.Called(responsible)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 []entity.SubscriptionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Responsible) ([]entity.SubscriptionInfo, error)); ok {
		return rf(responsible)
	}
	if rf, ok := ret.Get(0).(func(*entity.Responsible) []entity.SubscriptionInfo); ok {
		r0 = rf(responsible)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SubscriptionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Responsible) error); ok {
		r1 = rf(responsible)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentsService creates a new instance of PaymentsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentsService {
	mock := &PaymentsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
