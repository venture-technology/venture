// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"
)

// IDriverRepository is an autogenerated mock type for the IDriverRepository type
type IDriverRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, driver
func (_m *IDriverRepository) Create(ctx context.Context, driver *entity.Driver) error {
	ret := _m.Called(ctx, driver)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Driver) error); ok {
		r0 = rf(ctx, driver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, cnh
func (_m *IDriverRepository) Delete(ctx context.Context, cnh *string) error {
	ret := _m.Called(ctx, cnh)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) error); ok {
		r0 = rf(ctx, cnh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *IDriverRepository) FindByEmail(ctx context.Context, email *string) (*entity.Driver, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *entity.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*entity.Driver, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *entity.Driver); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, cnh
func (_m *IDriverRepository) Get(ctx context.Context, cnh *string) (*entity.Driver, error) {
	ret := _m.Called(ctx, cnh)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*entity.Driver, error)); ok {
		return rf(ctx, cnh)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *entity.Driver); ok {
		r0 = rf(ctx, cnh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, cnh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBank provides a mock function with given fields: ctx, driver
func (_m *IDriverRepository) SaveBank(ctx context.Context, driver *entity.Driver) error {
	ret := _m.Called(ctx, driver)

	if len(ret) == 0 {
		panic("no return value specified for SaveBank")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Driver) error); ok {
		r0 = rf(ctx, driver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePix provides a mock function with given fields: ctx, driver
func (_m *IDriverRepository) SavePix(ctx context.Context, driver *entity.Driver) error {
	ret := _m.Called(ctx, driver)

	if len(ret) == 0 {
		panic("no return value specified for SavePix")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Driver) error); ok {
		r0 = rf(ctx, driver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, driver
func (_m *IDriverRepository) Update(ctx context.Context, driver *entity.Driver) error {
	ret := _m.Called(ctx, driver)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Driver) error); ok {
		r0 = rf(ctx, driver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIDriverRepository creates a new instance of IDriverRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDriverRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDriverRepository {
	mock := &IDriverRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
