// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"
)

// Converters is an autogenerated mock type for the Converters type
type Converters struct {
	mock.Mock
}

// ConvertPDFtoHTML provides a mock function with given fields: htmlFile, contractProperty
func (_m *Converters) ConvertPDFtoHTML(htmlFile []byte, contractProperty entity.ContractProperty) ([]byte, error) {
	ret := _m.Called(htmlFile, contractProperty)

	if len(ret) == 0 {
		panic("no return value specified for ConvertPDFtoHTML")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, entity.ContractProperty) ([]byte, error)); ok {
		return rf(htmlFile, contractProperty)
	}
	if rf, ok := ret.Get(0).(func([]byte, entity.ContractProperty) []byte); ok {
		r0 = rf(htmlFile, contractProperty)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, entity.ContractProperty) error); ok {
		r1 = rf(htmlFile, contractProperty)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConverters creates a new instance of Converters. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConverters(t interface {
	mock.TestingT
	Cleanup(func())
}) *Converters {
	mock := &Converters{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
