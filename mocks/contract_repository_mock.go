// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"

	uuid "github.com/google/uuid"
)

// ContractRepository is an autogenerated mock type for the ContractRepository type
type ContractRepository struct {
	mock.Mock
}

// Accept provides a mock function with given fields: contract
func (_m *ContractRepository) Accept(contract *entity.Contract) error {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Contract) error); ok {
		r0 = rf(contract)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cancel provides a mock function with given fields: _a0
func (_m *ContractRepository) Cancel(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContractAlreadyExist provides a mock function with given fields: _a0
func (_m *ContractRepository) ContractAlreadyExist(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ContractAlreadyExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DriverHasEnableContract provides a mock function with given fields: cnh
func (_m *ContractRepository) DriverHasEnableContract(cnh string) (bool, error) {
	ret := _m.Called(cnh)

	if len(ret) == 0 {
		panic("no return value specified for DriverHasEnableContract")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(cnh)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(cnh)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cnh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Expired provides a mock function with given fields: _a0
func (_m *ContractRepository) Expired(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Expired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByDriver provides a mock function with given fields: cnh
func (_m *ContractRepository) GetByDriver(cnh string) ([]entity.Contract, error) {
	ret := _m.Called(cnh)

	if len(ret) == 0 {
		panic("no return value specified for GetByDriver")
	}

	var r0 []entity.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.Contract, error)); ok {
		return rf(cnh)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.Contract); ok {
		r0 = rf(cnh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cnh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByKid provides a mock function with given fields: rg
func (_m *ContractRepository) GetByKid(rg string) (*entity.Contract, error) {
	ret := _m.Called(rg)

	if len(ret) == 0 {
		panic("no return value specified for GetByKid")
	}

	var r0 *entity.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Contract, error)); ok {
		return rf(rg)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Contract); ok {
		r0 = rf(rg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(rg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByResponsible provides a mock function with given fields: cpf
func (_m *ContractRepository) GetByResponsible(cpf string) ([]entity.Contract, error) {
	ret := _m.Called(cpf)

	if len(ret) == 0 {
		panic("no return value specified for GetByResponsible")
	}

	var r0 []entity.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.Contract, error)); ok {
		return rf(cpf)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.Contract); ok {
		r0 = rf(cpf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySchool provides a mock function with given fields: cnpj
func (_m *ContractRepository) GetBySchool(cnpj string) ([]entity.Contract, error) {
	ret := _m.Called(cnpj)

	if len(ret) == 0 {
		panic("no return value specified for GetBySchool")
	}

	var r0 []entity.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.Contract, error)); ok {
		return rf(cnpj)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.Contract); ok {
		r0 = rf(cnpj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cnpj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUUID provides a mock function with given fields: id
func (_m *ContractRepository) GetByUUID(id uuid.UUID) (*entity.Contract, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByUUID")
	}

	var r0 *entity.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*entity.Contract, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entity.Contract); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumberOfEnableContractsByDriver provides a mock function with given fields: cnh
func (_m *ContractRepository) GetNumberOfEnableContractsByDriver(cnh string) (int64, error) {
	ret := _m.Called(cnh)

	if len(ret) == 0 {
		panic("no return value specified for GetNumberOfEnableContractsByDriver")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(cnh)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(cnh)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cnh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KidHasEnableContract provides a mock function with given fields: rg
func (_m *ContractRepository) KidHasEnableContract(rg string) (bool, error) {
	ret := _m.Called(rg)

	if len(ret) == 0 {
		panic("no return value specified for KidHasEnableContract")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(rg)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(rg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(rg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartnerHasEnableContract provides a mock function with given fields: id
func (_m *ContractRepository) PartnerHasEnableContract(id string) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for PartnerHasEnableContract")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResponsibleHasEnableContract provides a mock function with given fields: cpf
func (_m *ContractRepository) ResponsibleHasEnableContract(cpf string) (bool, error) {
	ret := _m.Called(cpf)

	if len(ret) == 0 {
		panic("no return value specified for ResponsibleHasEnableContract")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(cpf)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(cpf)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchoolHasEnableContract provides a mock function with given fields: cnpj
func (_m *ContractRepository) SchoolHasEnableContract(cnpj string) (bool, error) {
	ret := _m.Called(cnpj)

	if len(ret) == 0 {
		panic("no return value specified for SchoolHasEnableContract")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(cnpj)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(cnpj)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cnpj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, attributes
func (_m *ContractRepository) Update(_a0 uuid.UUID, attributes map[string]interface{}) error {
	ret := _m.Called(_a0, attributes)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, map[string]interface{}) error); ok {
		r0 = rf(_a0, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContractRepository creates a new instance of ContractRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContractRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContractRepository {
	mock := &ContractRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
