// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"
)

// DriverRepository is an autogenerated mock type for the DriverRepository type
type DriverRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: driver
func (_m *DriverRepository) Create(driver *entity.Driver) error {
	ret := _m.Called(driver)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Driver) error); ok {
		r0 = rf(driver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: cnh
func (_m *DriverRepository) Delete(cnh string) error {
	ret := _m.Called(cnh)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(cnh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: email
func (_m *DriverRepository) GetByEmail(email string) (*entity.Driver, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}
  
  // Get provides a mock function with given fields: cnh
func (_m *DriverRepository) Get(cnh string) (*entity.Driver, error) {
	ret := _m.Called(cnh)

	if len(ret) == 0 {
		panic("no return value specified for Get")
  }
    
	var r0 *entity.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Driver, error)); ok {
		return rf(cnh)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Driver); ok {
		r0 = rf(cnh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cnh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: email
func (_m *DriverRepository) GetByEmail(email string) (*entity.Driver, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *entity.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Driver, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Driver); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: cnh, attributes
func (_m *DriverRepository) Update(cnh string, attributes map[string]interface{}) error {
	ret := _m.Called(cnh, attributes)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(cnh, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDriverRepository creates a new instance of DriverRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriverRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DriverRepository {
	mock := &DriverRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
