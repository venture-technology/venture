// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	preapproval "github.com/mercadopago/sdk-go/pkg/preapproval"

	value "github.com/venture-technology/venture/internal/value"
)

// Payments is an autogenerated mock type for the Payments type
type Payments struct {
	mock.Mock
}

// CancelPreApproval provides a mock function with given fields: ctx, id
func (_m *Payments) CancelPreApproval(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CancelPreApproval")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPreApproval provides a mock function with given fields: ctx, params
func (_m *Payments) NewPreApproval(ctx context.Context, params value.CreateContractParams) (*preapproval.Response, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for NewPreApproval")
	}

	var r0 *preapproval.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, value.CreateContractParams) (*preapproval.Response, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, value.CreateContractParams) *preapproval.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*preapproval.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, value.CreateContractParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPayments creates a new instance of Payments. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPayments(t interface {
	mock.TestingT
	Cleanup(func())
}) *Payments {
	mock := &Payments{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
