// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"

	stripe "github.com/stripe/stripe-go/v79"
)

// IStripe is an autogenerated mock type for the IStripe type
type IStripe struct {
	mock.Mock
}

// CalculateRemainingValueSubscription provides a mock function with given fields: invoices, amount
func (_m *IStripe) CalculateRemainingValueSubscription(invoices map[string]entity.InvoiceInfo, amount float64) float64 {
	ret := _m.Called(invoices, amount)

	if len(ret) == 0 {
		panic("no return value specified for CalculateRemainingValueSubscription")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(map[string]entity.InvoiceInfo, float64) float64); ok {
		r0 = rf(invoices, amount)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// CreatePrice provides a mock function with given fields: contract
func (_m *IStripe) CreatePrice(contract *entity.Contract) (*stripe.Price, error) {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrice")
	}

	var r0 *stripe.Price
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Contract) (*stripe.Price, error)); ok {
		return rf(contract)
	}
	if rf, ok := ret.Get(0).(func(*entity.Contract) *stripe.Price); ok {
		r0 = rf(contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Price)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Contract) error); ok {
		r1 = rf(contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: contract
func (_m *IStripe) CreateProduct(contract *entity.Contract) (*stripe.Product, error) {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *stripe.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Contract) (*stripe.Product, error)); ok {
		return rf(contract)
	}
	if rf, ok := ret.Get(0).(func(*entity.Contract) *stripe.Product); ok {
		r0 = rf(contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Contract) error); ok {
		r1 = rf(contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: contract
func (_m *IStripe) CreateSubscription(contract *entity.Contract) (*stripe.Subscription, error) {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 *stripe.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Contract) (*stripe.Subscription, error)); ok {
		return rf(contract)
	}
	if rf, ok := ret.Get(0).(func(*entity.Contract) *stripe.Subscription); ok {
		r0 = rf(contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Contract) error); ok {
		r1 = rf(contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: contract
func (_m *IStripe) DeleteSubscription(contract *entity.Contract) (*stripe.Subscription, error) {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 *stripe.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Contract) (*stripe.Subscription, error)); ok {
		return rf(contract)
	}
	if rf, ok := ret.Get(0).(func(*entity.Contract) *stripe.Subscription); ok {
		r0 = rf(contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Contract) error); ok {
		r1 = rf(contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FineResponsible provides a mock function with given fields: contract, amountFine
func (_m *IStripe) FineResponsible(contract *entity.Contract, amountFine int64) (*stripe.PaymentIntent, error) {
	ret := _m.Called(contract, amountFine)

	if len(ret) == 0 {
		panic("no return value specified for FineResponsible")
	}

	var r0 *stripe.PaymentIntent
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Contract, int64) (*stripe.PaymentIntent, error)); ok {
		return rf(contract, amountFine)
	}
	if rf, ok := ret.Get(0).(func(*entity.Contract, int64) *stripe.PaymentIntent); ok {
		r0 = rf(contract, amountFine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.PaymentIntent)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Contract, int64) error); ok {
		r1 = rf(contract, amountFine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoice provides a mock function with given fields: invoiceId
func (_m *IStripe) GetInvoice(invoiceId string) (*stripe.Invoice, error) {
	ret := _m.Called(invoiceId)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoice")
	}

	var r0 *stripe.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*stripe.Invoice, error)); ok {
		return rf(invoiceId)
	}
	if rf, ok := ret.Get(0).(func(string) *stripe.Invoice); ok {
		r0 = rf(invoiceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(invoiceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: subscriptionId
func (_m *IStripe) GetSubscription(subscriptionId string) (*stripe.Subscription, error) {
	ret := _m.Called(subscriptionId)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *stripe.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*stripe.Subscription, error)); ok {
		return rf(subscriptionId)
	}
	if rf, ok := ret.Get(0).(func(string) *stripe.Subscription); ok {
		r0 = rf(subscriptionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subscriptionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvoices provides a mock function with given fields: contract
func (_m *IStripe) ListInvoices(contract *entity.Contract) (map[string]entity.InvoiceInfo, error) {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoices")
	}

	var r0 map[string]entity.InvoiceInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Contract) (map[string]entity.InvoiceInfo, error)); ok {
		return rf(contract)
	}
	if rf, ok := ret.Get(0).(func(*entity.Contract) map[string]entity.InvoiceInfo); ok {
		r0 = rf(contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entity.InvoiceInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Contract) error); ok {
		r1 = rf(contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: contract
func (_m *IStripe) ListSubscriptions(contract *entity.Contract) ([]entity.SubscriptionInfo, error) {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 []entity.SubscriptionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Contract) ([]entity.SubscriptionInfo, error)); ok {
		return rf(contract)
	}
	if rf, ok := ret.Get(0).(func(*entity.Contract) []entity.SubscriptionInfo); ok {
		r0 = rf(contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SubscriptionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Contract) error); ok {
		r1 = rf(contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIStripe creates a new instance of IStripe. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIStripe(t interface {
	mock.TestingT
	Cleanup(func())
}) *IStripe {
	mock := &IStripe{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
