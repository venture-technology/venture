// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"
)

// ChildRepository is an autogenerated mock type for the ChildRepository type
type ChildRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: child
func (_m *ChildRepository) Create(child *entity.Child) error {
	ret := _m.Called(child)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Child) error); ok {
		r0 = rf(child)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: rg
func (_m *ChildRepository) Delete(rg *string) error {
	ret := _m.Called(rg)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*string) error); ok {
		r0 = rf(rg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: cpf
func (_m *ChildRepository) FindAll(cpf *string) ([]entity.Child, error) {
	ret := _m.Called(cpf)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.Child
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]entity.Child, error)); ok {
		return rf(cpf)
	}
	if rf, ok := ret.Get(0).(func(*string) []entity.Child); ok {
		r0 = rf(cpf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Child)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: rg
func (_m *ChildRepository) Get(rg *string) (*entity.Child, error) {
	ret := _m.Called(rg)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.Child
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*entity.Child, error)); ok {
		return rf(rg)
	}
	if rf, ok := ret.Get(0).(func(*string) *entity.Child); ok {
		r0 = rf(rg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Child)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(rg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: rg, attributes
func (_m *ChildRepository) Update(rg string, attributes map[string]interface{}) error {
	ret := _m.Called(rg, attributes)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(rg, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChildRepository creates a new instance of ChildRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChildRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChildRepository {
	mock := &ChildRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
