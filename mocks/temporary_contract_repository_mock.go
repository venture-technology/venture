// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"

	uuid "github.com/google/uuid"
)

// TempContractRepository is an autogenerated mock type for the TempContractRepository type
type TempContractRepository struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: _a0
func (_m *TempContractRepository) Cancel(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: contract
func (_m *TempContractRepository) Create(contract *entity.TempContract) error {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.TempContract) error); ok {
		r0 = rf(contract)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Expire provides a mock function with given fields: uuids
func (_m *TempContractRepository) Expire(uuids []uuid.UUID) error {
	ret := _m.Called(uuids)

	if len(ret) == 0 {
		panic("no return value specified for Expire")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID) error); ok {
		r0 = rf(uuids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByDriver provides a mock function with given fields: cnh
func (_m *TempContractRepository) GetByDriver(cnh *string) ([]entity.TempContract, error) {
	ret := _m.Called(cnh)

	if len(ret) == 0 {
		panic("no return value specified for GetByDriver")
	}

	var r0 []entity.TempContract
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]entity.TempContract, error)); ok {
		return rf(cnh)
	}
	if rf, ok := ret.Get(0).(func(*string) []entity.TempContract); ok {
		r0 = rf(cnh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TempContract)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(cnh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEveryone provides a mock function with given fields: contract
func (_m *TempContractRepository) GetByEveryone(contract *entity.TempContract) (bool, error) {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for GetByEveryone")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.TempContract) (bool, error)); ok {
		return rf(contract)
	}
	if rf, ok := ret.Get(0).(func(*entity.TempContract) bool); ok {
		r0 = rf(contract)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*entity.TempContract) error); ok {
		r1 = rf(contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByResponsible provides a mock function with given fields: cpf
func (_m *TempContractRepository) GetByResponsible(cpf *string) ([]entity.TempContract, error) {
	ret := _m.Called(cpf)

	if len(ret) == 0 {
		panic("no return value specified for GetByResponsible")
	}

	var r0 []entity.TempContract
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]entity.TempContract, error)); ok {
		return rf(cpf)
	}
	if rf, ok := ret.Get(0).(func(*string) []entity.TempContract); ok {
		r0 = rf(cpf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TempContract)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExpiredContracts provides a mock function with no fields
func (_m *TempContractRepository) GetExpiredContracts() ([]entity.TempContract, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExpiredContracts")
	}

	var r0 []entity.TempContract
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.TempContract, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.TempContract); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TempContract)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, attrs
func (_m *TempContractRepository) Update(_a0 uuid.UUID, attrs map[string]interface{}) error {
	ret := _m.Called(_a0, attrs)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, map[string]interface{}) error); ok {
		r0 = rf(_a0, attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTempContractRepository creates a new instance of TempContractRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTempContractRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TempContractRepository {
	mock := &TempContractRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
