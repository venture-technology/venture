// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	agreements "github.com/venture-technology/venture/internal/domain/service/agreements"
	entity "github.com/venture-technology/venture/internal/entity"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// AgreementService is an autogenerated mock type for the AgreementService type
type AgreementService struct {
	mock.Mock
}

// GetAgreementHtml provides a mock function with given fields: path
func (_m *AgreementService) GetAgreementHtml(path string) ([]byte, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetAgreementHtml")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleCallbackVerification provides a mock function with given fields:
func (_m *AgreementService) HandleCallbackVerification() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HandleCallbackVerification")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignatureRequest provides a mock function with given fields: contract
func (_m *AgreementService) SignatureRequest(contract entity.ContractProperty) (agreements.ContractRequest, error) {
	ret := _m.Called(contract)

	if len(ret) == 0 {
		panic("no return value specified for SignatureRequest")
	}

	var r0 agreements.ContractRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.ContractProperty) (agreements.ContractRequest, error)); ok {
		return rf(contract)
	}
	if rf, ok := ret.Get(0).(func(entity.ContractProperty) agreements.ContractRequest); ok {
		r0 = rf(contract)
	} else {
		r0 = ret.Get(0).(agreements.ContractRequest)
	}

	if rf, ok := ret.Get(1).(func(entity.ContractProperty) error); ok {
		r1 = rf(contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignatureRequestAllSigned provides a mock function with given fields: _a0
func (_m *AgreementService) SignatureRequestAllSigned(_a0 *gin.Context) (agreements.ASRASOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SignatureRequestAllSigned")
	}

	var r0 agreements.ASRASOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (agreements.ASRASOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) agreements.ASRASOutput); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(agreements.ASRASOutput)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAgreementService creates a new instance of AgreementService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgreementService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgreementService {
	mock := &AgreementService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
