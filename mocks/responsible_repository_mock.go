// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/venture-technology/venture/internal/entity"
)

// ResponsibleRepository is an autogenerated mock type for the ResponsibleRepository type
type ResponsibleRepository struct {
	mock.Mock
}

// Auth provides a mock function with given fields: responsible
func (_m *ResponsibleRepository) Auth(responsible *entity.Responsible) (*entity.Responsible, error) {
	ret := _m.Called(responsible)

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 *entity.Responsible
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Responsible) (*entity.Responsible, error)); ok {
		return rf(responsible)
	}
	if rf, ok := ret.Get(0).(func(*entity.Responsible) *entity.Responsible); ok {
		r0 = rf(responsible)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Responsible)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Responsible) error); ok {
		r1 = rf(responsible)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: responsible
func (_m *ResponsibleRepository) Create(responsible *entity.Responsible) error {
	ret := _m.Called(responsible)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Responsible) error); ok {
		r0 = rf(responsible)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: cpf
func (_m *ResponsibleRepository) Delete(cpf string) error {
	ret := _m.Called(cpf)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(cpf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: email
func (_m *ResponsibleRepository) FindByEmail(email string) (*entity.Responsible, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *entity.Responsible
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Responsible, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Responsible); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Responsible)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: cpf
func (_m *ResponsibleRepository) Get(cpf string) (*entity.Responsible, error) {
	ret := _m.Called(cpf)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.Responsible
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Responsible, error)); ok {
		return rf(cpf)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Responsible); ok {
		r0 = rf(cpf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Responsible)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCard provides a mock function with given fields: cpf, cardToken, paymentMethodId
func (_m *ResponsibleRepository) SaveCard(cpf string, cardToken string, paymentMethodId string) error {
	ret := _m.Called(cpf, cardToken, paymentMethodId)

	if len(ret) == 0 {
		panic("no return value specified for SaveCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(cpf, cardToken, paymentMethodId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: cpf, attributes
func (_m *ResponsibleRepository) Update(cpf string, attributes map[string]interface{}) error {
	ret := _m.Called(cpf, attributes)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(cpf, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewResponsibleRepository creates a new instance of ResponsibleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponsibleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResponsibleRepository {
	mock := &ResponsibleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
