// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// CacheIface is an autogenerated mock type for the CacheIface type
type CacheIface struct {
	mock.Mock
}

// Expire provides a mock function with given fields: key, expiration
func (_m *CacheIface) Expire(key string, expiration time.Duration) (bool, error) {
	ret := _m.Called(key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Expire")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) (bool, error)); ok {
		return rf(key, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, time.Duration) bool); ok {
		r0 = rf(key, expiration)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, time.Duration) error); ok {
		r1 = rf(key, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: key
func (_m *CacheIface) Get(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value, expiration
func (_m *CacheIface) Set(key string, value interface{}, expiration time.Duration) error {
	ret := _m.Called(key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = rf(key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCacheIface creates a new instance of CacheIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheIface {
	mock := &CacheIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
